# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ckanext.drs.models.base_model import Model
import ckanext.drs.utils as util


class ServiceType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group=None, artifact=None, version=None):  # noqa: E501
        """ServiceType - a model defined in OpenAPI

        :param group: The group of this ServiceType.  # noqa: E501
        :type group: str
        :param artifact: The artifact of this ServiceType.  # noqa: E501
        :type artifact: str
        :param version: The version of this ServiceType.  # noqa: E501
        :type version: str
        """
        self.openapi_types = {
            'group': str,
            'artifact': str,
            'version': str
        }

        self.attribute_map = {
            'group': 'group',
            'artifact': 'artifact',
            'version': 'version'
        }

        self._group = group
        self._artifact = artifact
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceType of this ServiceType.  # noqa: E501
        :rtype: ServiceType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this ServiceType.

        Namespace in reverse domain name format. Use `org.ga4gh` for implementations compliant with official GA4GH specifications. For services with custom APIs not standardized by GA4GH, or implementations diverging from official GA4GH specifications, use a different namespace (e.g. your organization's reverse domain name).  # noqa: E501

        :return: The group of this ServiceType.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ServiceType.

        Namespace in reverse domain name format. Use `org.ga4gh` for implementations compliant with official GA4GH specifications. For services with custom APIs not standardized by GA4GH, or implementations diverging from official GA4GH specifications, use a different namespace (e.g. your organization's reverse domain name).  # noqa: E501

        :param group: The group of this ServiceType.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    @property
    def artifact(self):
        """Gets the artifact of this ServiceType.

        Name of the API or GA4GH specification implemented. Official GA4GH types should be assigned as part of standards approval process. Custom artifacts are supported.  # noqa: E501

        :return: The artifact of this ServiceType.
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this ServiceType.

        Name of the API or GA4GH specification implemented. Official GA4GH types should be assigned as part of standards approval process. Custom artifacts are supported.  # noqa: E501

        :param artifact: The artifact of this ServiceType.
        :type artifact: str
        """
        if artifact is None:
            raise ValueError("Invalid value for `artifact`, must not be `None`")  # noqa: E501

        self._artifact = artifact

    @property
    def version(self):
        """Gets the version of this ServiceType.

        Version of the API or specification. GA4GH specifications use semantic versioning.  # noqa: E501

        :return: The version of this ServiceType.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceType.

        Version of the API or specification. GA4GH specifications use semantic versioning.  # noqa: E501

        :param version: The version of this ServiceType.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version
