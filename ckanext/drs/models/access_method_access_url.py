# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ckanext.drs.models.base_model import Model
import ckanext.drs.utils as util


class AccessMethodAccessUrl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url=None, headers=None):  # noqa: E501
        """AccessMethodAccessUrl - a model defined in OpenAPI

        :param url: The url of this AccessMethodAccessUrl.  # noqa: E501
        :type url: str
        :param headers: The headers of this AccessMethodAccessUrl.  # noqa: E501
        :type headers: List[str]
        """
        self.openapi_types = {
            'url': str,
            'headers': List[str]
        }

        self.attribute_map = {
            'url': 'url',
            'headers': 'headers'
        }

        self._url = url
        self._headers = headers

    @classmethod
    def from_dict(cls, dikt) -> 'AccessMethodAccessUrl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccessMethod_access_url of this AccessMethodAccessUrl.  # noqa: E501
        :rtype: AccessMethodAccessUrl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this AccessMethodAccessUrl.

        A fully resolvable URL that can be used to fetch the actual object bytes.  # noqa: E501

        :return: The url of this AccessMethodAccessUrl.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AccessMethodAccessUrl.

        A fully resolvable URL that can be used to fetch the actual object bytes.  # noqa: E501

        :param url: The url of this AccessMethodAccessUrl.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def headers(self):
        """Gets the headers of this AccessMethodAccessUrl.

        An optional list of headers to include in the HTTP request to `url`. These headers can be used to provide auth tokens required to fetch the object bytes.  # noqa: E501

        :return: The headers of this AccessMethodAccessUrl.
        :rtype: List[str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this AccessMethodAccessUrl.

        An optional list of headers to include in the HTTP request to `url`. These headers can be used to provide auth tokens required to fetch the object bytes.  # noqa: E501

        :param headers: The headers of this AccessMethodAccessUrl.
        :type headers: List[str]
        """

        self._headers = headers
