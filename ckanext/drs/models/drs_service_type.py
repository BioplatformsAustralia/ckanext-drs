# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ckanext.drs.models.base_model import Model
import ckanext.drs.utils as util


class DrsServiceType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact=None):  # noqa: E501
        """DrsServiceType - a model defined in OpenAPI

        :param artifact: The artifact of this DrsServiceType.  # noqa: E501
        :type artifact: str
        """
        self.openapi_types = {
            'artifact': str
        }

        self.attribute_map = {
            'artifact': 'artifact'
        }

        self._artifact = artifact

    @classmethod
    def from_dict(cls, dikt) -> 'DrsServiceType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DrsService_type of this DrsServiceType.  # noqa: E501
        :rtype: DrsServiceType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact(self):
        """Gets the artifact of this DrsServiceType.


        :return: The artifact of this DrsServiceType.
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this DrsServiceType.


        :param artifact: The artifact of this DrsServiceType.
        :type artifact: str
        """
        allowed_values = ["drs"]  # noqa: E501
        if artifact not in allowed_values:
            raise ValueError(
                "Invalid value for `artifact` ({0}), must be one of {1}"
                .format(artifact, allowed_values)
            )

        self._artifact = artifact
